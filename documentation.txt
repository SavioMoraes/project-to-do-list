-------------------------> Project Todo List <---------------------------

1 - Adicione à sua lista o título "Minha Lista de Tarefas" em uma tag
O que será verificado:
Será verificado se sua página possui uma tag header com o conteúdo Minha Lista de Tarefas

R: inicialmente eu inseri as tags header, com id title, dinamicamente, pelo script.js, através da funtion insertTitle, como filha de body e h1, id title-text, também dinamicamente como filha de header, mas tive que refazer e colocar essas tags no index.html, dentro da tag main, pois o arquivo script.js ficou muito grande e não passava no linter nos últimos requisitos.

-------------------------------------------------------------------------

2 - Adicione abaixo do título um pequeno e discreto parágrafo com id="funcionamento" e com o texto "Clique duas vezes em um item para marcá-lo como completo"
O que será verificado:
Será verificado que existe na sua página um elemento com o id funcionamento com o conteúdo Clique duas vezes em um item para marcá-lo como completo

R: mesma situação do requisito 1, foi substituído a function insertParagraphToTitle que inseria o parágrafo dinamicamente pelo script.js, pela colocação da tag p com id funcionamento e innerHTML Cique duas vezes em um item para marcálo como completo, no index.html;

-------------------------------------------------------------------------

3 - Adicione um input com o id="texto-tarefa" onde a pessoa usuária poderá digitar o nome do item que deseja adicionar à lista
O que será verificado:
Será verificada a existência de um elemento do tipo input com o id texto-tarefa.

R: Primeiro buscada a tag main através do id #main-content e passada na constante mainContent para servir como mãe da tag section, criada e alocada na constante inputSection. A constante taskEntry que cria uma tag input será filha da inputSection.
Depois crio a function createsTasks onde seto o id como texto-tarefa, p type como text e o placeholder como Digite aqui a nova tarefa de taskEntry e a coloco como filha de inputSection.
* As functions de inserção dos tags são inseridas dentro da function window.onload, dessa forma só são criadas após o navegador ler todo html css e script;

-------------------------------------------------------------------------

4 - Adicione uma lista ordenada de tarefas com o id="lista-tarefas"
O que será verificado: 
Será verificada a existência de um elemento ol com o id lista-tarefas.

R: Cria a constante listSection que criara uma seção dinamicamente e será mãe da constante ordenedList que ira criar uma tag ol,
depois cria a function createListSection que seta o id de listSection como list-section e a coloca como filha de mainContent,
depois cria a function createOrdenedList que setará o id de ordenedlist como lista-tarefas e o colocará como filha de listSection.

-------------------------------------------------------------------------

5 - Adicione um botão com id="criar-tarefa" e, ao clicar nesse botão, um novo item deverá ser criado ao final da lista e o texto do input deve ser limpo
O que será verificado:
Será verificada a existência de um elemento do tipo button com o id criar-tarefa
No campo de input será digitado o texto de uma tarefa qualquer e, em seguida, clicar-se-á no botão de criar tarefa. Será verificado que, após o clique, o texto digitado aparece na lista e desaparece do input.
A adição de elementos na lista será feita algumas vezes, e será checado se todos os itens criados permanecem na lista na medida em que novos são adicionados.

R: cria a tag (elemento) button e salva na constante taskButton,
depois cria a função createsTaskButton que seta o id criar-tarefa, o type como onclick e o textContent como Criar Tarefa em taskButton e a coloca como filha de inputSection;
depois cria a function createsElementsInTheList que cria uma tag li e salva na constante elementList, setando id como task, textContent como o valor vindo do input (taskEntry.value) colocando-a como filha da lista ordenada ordenedList e depois zerando o valor do input com taskEntry.value = '';
depois cria uma function que colocará um addEventListener em taskButton, passando como parâmetros o evento de click e a funcão createsElementsInTheList, fazendo com que ao ser clicado o botão de criar tarefa, execute a function createsElementsInTheList, criando uma nova tarefa na lista de tarefas; 

-------------------------------------------------------------------------

6 - Ordene os itens da lista de tarefas por ordem de criação
O que será verificado:
Três itens serão criados na lista e será checado se eles estão ordenados por ordem de criação - ou seja, primeiro o primeiro item criado, depois o segundo, e assim por diante.

R: A forma com que foi resolvido o requisito anterior (5), resolveu este requisito, pois coloca uma li embaixo da outra; 

-------------------------------------------------------------------------

7 - Clicar em um item da lista deve alterar a cor de fundo do item para cinza rgb(128,128,128)
O que será verificado:
Será verificado que, ao se carregar a página, os itens da lista não tem o estilo CSS background-color: rgb(128, 128, 128)
Será verificado que, ao se clicar em um item da lista, ele passa a ter o estilo CSS background-color: rgb(128, 128, 128)

R: Dentro da function createsElementsInTheList adiciona um evento de click a element list, chamando a function selectTask;
cria a function selectTask passando event como parâmetro. Essa função 
recebe uma constante selected que vai guardar a task com classe          .selected que será criada em addEvent.
cria a constante addEvent que vai receber o target do evento passao por parâmetro, ou seja a task criaa em createsElementsInTheList (elementList), receberá a classe .selected;
depois testa se a constante select é diferente de nulo, caso verdadeiro, remove a classe .selected, senão a constante addEvent, que representará elementList, receberá a classe .selected e deixará a task selecionada.
Para ajudar essa visualização a classe selected recebe em style.css um font-size large e backgroundColor gray.
-------------------------------------------------------------------------

8 - Não deve ser possível selecionar mais de um elemento da lista ao mesmo tempo
O que será verificado:
Será verificado que, quando um elemento da lista é selecionado, o elemento selecionado previamente deixa de sê-lo. Isso é verificado através da presença ou não do estilo background-color: rgb(128, 128, 128) no elemento.

R: O teste (if) feito dentro da function selectTask, já mata essa questão removendo a seleção do item selecionado cso outro seje clicado. 

-------------------------------------------------------------------------

9 - Clicar duas vezes em um item, faz com que ele seja riscado, indicando que foi completo. Deve ser possível desfazer essa ação clicando novamente duas vezes no item
Pontos importantes sobre este requisito:
* Crie uma classe CSS com o nome "completed" e defina a propriedade "text-decoration" com o valor "line-through".
* Utilize a classe CSS "completed" para adicionar o efeito de letra tachada (riscada) às tarefas finalizadas.
O que será verificado:
Será verificado que, antes da ação ser disparada, o elemento adicionado à lista não tem nem a classe completed nem o estilo line-through solid rgb(0, 0, 0).
Será verificado que a ação pedida é disparada mediante duplo clique no elemento da lista e que os elementos da lista completos tem em si a classe completed e a propriedade text-decoration com o valor line-through solid rgb(0, 0, 0)
Será verificado que, com um segundo duplo clique, um elemento completo deixa de sê-lo

R: Primeiro é adicionado um addventListener ao elementList dentro de createsElementsInTheList, passando como parâmetros um evento de double-click e chamando a function taskThrough.
Cria a function taskThrough que recebe como parâmetro o evento de double-click de elementList, então event recebe o target de elementList por prãmetro e isso é salvo na constante taskEvent,
depois através do método contains, que poderia ser mais assertivo se aplicado o include, testa se existe um conjunto de caracteres em classList do taskEvent incluindo o texto 'completed', caso afirmativo, remove a classe completed, caso negativo adiciona a classe completed em taskEvent.
Para completar seta em style.css na classe .completed o text-decoration como through solid rgb(0, 0, 0);
--> contains(), assim como o include(), determina se um conjunto de caracteres pode ser encontrado dentro de outra string, retornando true ou false. Recebe como parâmetro o conjuntode caracteres que será pesquisado dentro da string.

-------------------------------------------------------------------------

10 - Adicione um botão com id="apaga-tudo" que quando clicado deve apagar todos os itens da lista
O que será verificado:
Será verificado que existe um elemento button com o id apaga-tudo
Será verificado que, dado que uma lista possui tarefas, um clique no botão a deixa vazia

R: Cria uma section e salva na constante miscellaneousButtons que será a mãe de eraseEverythingButton. Cria o button e salva na constante eraseEverythingButton. 
Cria a function createSectionMiscellaneousButtons que seta o id de miscellaneousButtons como miscellaneousButtons e a coloca como filha de mainContent;
Cria a function createEraseEverythingButton que seta o id de eraseEverythingButton como apaga-tudo, seta o textContent de eraseEverythingButton como Limpar Lista, coloca eraseEverythingButton como filha de miscellaneousButtons; cria a constante size que recebe ordenedList.childElementCount, ou seja, vai retornar a quantidade de filhs ordenedList tem. Depois passa size dentro de um laço e remove o último filho de ordenedList a cada interação até remover todos. E por fim chama a function createEraseEverythingButton fora da função para ela ser executada e o botãoLimpar lista criado.
Depois cria a function eraseEverything que chama um addEventListener em eraseEverythingButton passando como parâmetro um evento de click e a function createEraseEverythingButton que apaga todas as tarefas da lista;

-------------------------------------------------------------------------

11 - Adicione um botão com id="remover-finalizados" que quando clicado remove somente os elementos finalizados da sua lista
O que será verificado:
Será verificado que existe um elemento button com o id remover-finalizados
Será verificado que, ao clicar no botão, todos os elementos marcados como feitos são removidos da lista

R: Cria a constante deletesCompletedtasks que irá criar um elemento button,
cria a function createDeletesCompletedTasks que irá setar o id remover-finalizados e o textContent Remove Finalizados em deletesCompletedtasks; depois coloca deletesCompletedtasks como filha de miscellaneousButtons; depois cria a constante completedTask que vai receber os elementos com a classe completed, ou seja, as elementList com classe .completed; depois cria a constante sizeOfCompletedTasks que recebe o tamanho de completedTask, ou seja, todas as tarefas completas; depois utiliza um laço for e percorre todas as tarefas completas e remove-as da lista;
depois a function createDeletesCompletedTasks é chamada fora da function para criar o botão e;
por fim, cria a function clearFinish que cria um addEventListener em deletesCompletedtasks passando como parâmetro um evento de click e a function createDeletesCompletedTasks, fazendo com que quando o botão Limpar Completos for clicado as tarefas completas sejam deletadas da lista de tarefas e, depois coloca essas duas funções criadas dentro de window.onload.


-------------------------------------------------------------------------
------------------------------> BÔNUS <----------------------------------
-------------------------------------------------------------------------

12 - Adicione um botão com id="salvar-tarefas" que salve o conteúdo da lista. Se você fechar e reabrir a página, a lista deve continuar no estado em que estava
O que será verificado:
Será verificado que existe um elemento button com o id salvar-tarefas
Será verificado que, quando a lista tiver vários elementos, alguns dos quais marcados como finalizados, um recarregamento da página mantém a lista exatamente como está.

R: Cria a constante saveTaskButton que cria um botão;
Depois cria a function createSaveTaskButton que recebe a variável saveTaskButton, seta o id como salvar-tarefas, o textContent como Salvar Tarefas e insere como filha de miscellaneousButtons;
Depois cria a function saveTaskList, dentro dela cria a constante tasks que receberá os filhos de ordenedList, ou seja os elementList; depois cria a constante size, que recebe o tamanho de tasks; depois cria a constante saveInfo que recebe um array vazio; depois faz um laço for que vai percorrer as tasks e colocá-las através da function push na última posição do array, assim tods as tasks da lista vão para o array saveInfo; depois testa no if se as tasks presentes na lista tem a classe completed (explicação do constains no requsito 9) e passando saveInfo.push, com true ou false, garante que o tamanho do array continuará o mesmo, até quando existir tarefas completas; depois com o comando localStorage.setItem, passando como parâmetro a string list representando a chave e o array saveInfo como valor que serão armazenados em localStorage e os dados não serão perdidos ao recarregar a página;
depois cria a function loadList que cria uma constante list que recebe a lista sava em localStorage, recuperada através do comando localStorage.getItem('list'); depois verifica se list é nulo ou vazio, não trazendo nada no retorno; em seguida cria uma constante chamada array que vai receber list.split(','), dividindo a string salva em list, separando-as por vígula, e salvando em uma lista ordenada de substrings e colocando-as em um array; depois cria um laço for que vai percorrer cada elemento do array, setando index += 2 para pegar apenas a chave e não o valor do array e depois cria uma constante element que vai criar uma li, que vai receber como innerText o array na posição index; como calsse tarefa, vai ser adicionado a element o addEventListener de click chamando selectTask e o addEventListener de double-click chamando taskThrough; depois testa se o array na posição index + 1 é verdadeiro, desta forma identificando que tem mais de uma classe, é true e seta a classe como completed; depois recoloca element dentro de ordenedList;
No próximo passo cria a function addEventSaveList que vai pegar a constante saveTaskButton, passar um addEventSaveList que vi receber como parâmetro um evento de click e a chamda da function saveTaskList, salvando a lista de tarefas em localStorage;
--> O método split() divide uma String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array. A divisão é feita procurando um padrão, onde o padrão é fornecido como o primeiro parâmetro na chamada do método.

-------------------------------------------------------------------------

13 - Adicione dois botões, um com id="mover-cima" e outro com id="mover-baixo", que permitam mover o item selecionado para cima ou para baixo na lista de tarefas
Pontos importantes sobre este requisito bônus:
* Antes de começar a desenvolver essa funcionalidade, pare e pense. O que significa mover um item de uma lista para cima ou para baixo no **_DOM_**? Você já possui todas as habilidades necessárias para fazer isso.
* Habitue-se a pensar nos casos especiais ao construir programas. O que acontece se o usuário tentar mover o primeiro item para cima ou o último para baixo?
O que será verificado:
Será verificada a existência de dois elementos button, um com o id mover-cima e o outro com o id mover-baixo
Será verificado que, dado que diversos elementos foram acrescentados à lista, movimentá-los de formas diversas os deixa nas posições esperadas
Será verificado que, caso algum elemento esteja finalizado, este status deve persistir ainda que se mova o elemento
Será verificado que, caso nenhum elemento esteja selecionado, clicar nos botões não altera a lista
Será verificado que um elemento que esteja selecionado deve se manter selecionado mesmo depois de movido
Caso especial! Será verificado que, caso se tente subir o elemento no topo da lista ou, caso se tente descer o último elemento da lista, esta não deve ser alterada

R: Cria os três botões salvando nas constantes moveUpButton, moveDownButton e removeSelecionedTaskButton;
cria as functions createMoveUpButton e createMoveDownButton que vão receber respectivamente moveUpButton e moveDownButton passando como ids, respectivamente mover-cima e mover-baixo e como textContent, também respectivamente uma seta para cima e uma seta para baixo, depois coloca cada uma delas como filhas de miscellaneousButtons e chama ambas as functions fora do escopo delas para criar os botões;
em seguida cria as functions moveUp e moveDown que pegam as tasks selecionadas, primeiro testa num if se nulas ou respectivamente se tiver o elemento anterior nulo ou o elemento posterior nulo, não retornado nada, ou seja, não podendo mover nem pra cima nem para baixo, cria a constante previous e next, respectivamente e seta nelas o elemento anterior do seleciona e, respectivamente o elemento posterior ao selecionado, para então passando em ordenedList a function insertBefore, que inverte as posições das tasks, passando em moveUp (select, previous) como parâmetro  e para moveDown (next, selected);
Por fim mais duas functions são criadas, addEventMoveUp e addEventMoveDown que criam uma constante button em cada uma delas, a primeira buscando pelo botão de id mover-cima e a segunda pelo botão de id mover-baixo, passando para ambas um addEventListener com um evento de click e chamando as functions moveUp e moveDown respectivamente;

-------------------------------------------------------------------------

14 - Adicione um botão com id="remover-selecionado" que, quando clicado, remove o item selecionado
O que será verificado:
Será verificada a presença de um elemento button com um id remover-selecionado
Será verificado que, no clicar no botão, somente o elemento selecionado é removido

R: O botão já foi criado no requisito anterior;
Cria a function creatRemoveSelectionedTaskButton seta o id remover-selecionado e o textContent 'X' no botão removeSelecionedTaskButton e coloca-o como filho de miscellaneousButtons, depois chama a function creatRemoveSelectionedTaskButton for do escopo dela para criar o botão;
depois cria a function clearSelected, que cria a constante selected que recebe a task com classe .selected e remove a task de ordenedList;
por fim, cria a function addEventClearSelected, que pega a constante removeSelecionedTaskButton, adiciona a ela, ou seja, ao botão remover-selecionado (X), um evento de click e a chamaa da function clearSelected que remove a task selecionada;

------------------------------> Finish <---------------------------------

Obs: Também é adicionado ao projeto a tag footer e estilizações para tornar o design e a experiência do usuário mais agradável;

------------------------------> The End <--------------------------------